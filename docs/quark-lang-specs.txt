Program -> Statement_List

Statement_List -> Statement ";" ( Statement_List )*

Statement -> Import_Statement | Export_Statement | Assignment_Statement | Expression

Import_Statement -> "import" ID_List [ "as" ID_List ]

Export_Statement -> "export" ID_List [ "as" ID_List ]

Assignment_Statement -> ID "=" Expression

Expression -> Let_Expression | Fun_Expression | Lambda_Expression | Conditional_Expression | Application_Expression | Logical_Expression

Let_Expression -> "let" ID_List "=" Expression_list "in"  Expression

Fun_Expression -> "fun" ID "with" ID_List "=" Applicable_Expression "in"  Expression

Lambda_Expression -> "lambda" ID_List "." Expression

Conditional_Expression -> "if" Expression "then" Expression [ "else" Expression ]

Application_Expression -> Expression "(" Expression_List ")"

Function_Composition -> ID ( "@" ID )

Logical_Expression -> Or_Expression

Or_Expression -> And_Expression Or_Expression_r

Or_Expression_Rhs -> ( "xor" | "or" ) And_Expression Or_Expression_Rhs | ε

And_Expression -> Not_Expression And_Expression_Rhs

And_Expression_Rhs -> "and"  Not_Expression And_Expression_Rhs | ε

Not_Expression -> "not" Not_Expression | Comp_Expression

Comp_Expression -> Arith_Expression Comp_Expression_Rhs

Comp_Expression_Rhs -> ( "==" | "!=" | ">=" | "<" | "<=" ) Arith_Expression Comp_Expression_Rhs | ε

Arith_Expression -> Term_Expression Arith_Expression_Rhs

Arith_Expression_Rhs -> ( "+" | "-" ) Term_Expression Arith_Expression_Rhs | ε

Term_Expression -> Factor_Expression Term_Expression_Rhs

Term_Expression_Rhs -> ( "*" | "/" | "//" | "%" | "/%" )  Factor_Expression Term_Expression_Rhs | ε

Factor_Expression -> ( "+" | "-" | "~" ) Factor_Expression | Power_Expression

Power_Expression -> Nil_Expression Power_Expression_Rhs

Power_Expression_Rhs -> "**" Power_Expression_Rhs | ε

Nil_Expression -> "nil" Nil_Expression | List_Expression

List_Expression -> List_Access_Expression List_Expression_Rhs

List_Expression_Rhs -> "|" List_Access_Expression List_Expression_Rhs | ε

List_Access_Expression -> ( "tail" | "head" ) List_Access_Expression | Atom_Expression

Atom_Expression -> "(" Expression ")" | LITERAL

Expression_List -> Expression Expression_List_Rhs

Expression_List_Rhs -> "," Expression Expression_List_Rhs | ε

ID_List -> ID ID_List_Rhs

ID_List_Rhs _> "," ID ID_List_Rhs | ε

Const_Prefixed_ID_List -> [ "const" ] ID ID_List_Rhs

Const_Prefixed_ID_List_Rhs -> "," ID Const_Prefixed_ID_List_Rhs | ε

LITERAL -> ID | NUMBER | STRING

LEXEME -> ID | NUMBER | STRING | OPERATOR | KEYWORD | SEPARATOR

ID -> [a-zA-Z_$]+[a-zA-Z0-9_$]*

COMMENT -> #1(#+|\n)

STRING -> \"[^\"\n]*\"

NUMBER -> INTEGER | REAL | COMPLEX

INTEGER -> ([1-9]+[0-9]*|0+)

REAL -> [ INTEGER ] "." INTEGER | INTEGER "." [ INTEGER ]

COMPLEX -> REAL "im"

OPERATOR -> "+"
          | "-"
          | "%"
          | "*"
          | "**"
          | "/"
          | "//"
          | "@"
          | "&"
          | "|"
          | "<"
          | ">"
          | ">="
          | "<="
          | "="
          | "=="
          | "!="
          | "not"
          | "and"
          | "or"
          | "xor"
          | "nil"

KEYWORD ->  "if"
          | "then"
          | "else"
          | "with"
          | "let"
          | "const"
          | "lambda"
          | "with"
          | "fun"
          | "cout"
          | "cin"

SKIPPABLE = ( "\n" | "\s" | "\t" ) SKIPPABLE | ε

SEPARATOR -> ","
           | "."
           | "{"
           | "}"
           | "("
           | ")"
           | "["
           | "]"
           | ";"
