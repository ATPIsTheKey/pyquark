import unittest

from quark.core.scanner import QuarkScanner
from quark.core.parser import QuarkParser, QuarkParserError


class TestParser(unittest.TestCase):
    def test_common_source_code(self):
        sources = (
            'defun gcd :: a, b => ?( a | b == 0, gcd(b, a % b) | ...)',
            'def Y = fun :: f => (fun :: x => f(x(x)))(fun :: x => f(x(x)))',
            'let fact = fun :: n => ?( 1 | n == 1, n * fact(n - 1) | ...) in fact(2)',
            'defun pair :: a, b, f => (f(a, b)); defun first :: a, b => a; defun second :: a, b => b',
            '(let a, b = 1, 2 in fun :: x => a + b + x)(1)',
            'let gcd = fun :: a, b => ?( a | b == 0, gcd(b, a % b) | ...) in gcd (14, 14)',
            'def ack = fun :: m, n => ?( n + 1 | m == 0, ack(m - 1, 1) | n == 0, ack(m - 1, ack(m, n - 1))  | ...)'
        )
        shoulds = (
            {'ast_node_name': 'StatementList', 'statements': [{'ast_node_name': 'AssignmentStatement', 'names': {'ast_node_name': 'IdList', 'identifiers': ["Token(TokenTypes.ID, 'gcd', (5, 0))"]}, 'value': {'ast_node_name': 'ExpressionList', 'expressions': [{'ast_node_name': 'FunctionExpression', 'argument_names': {'ast_node_name': 'IdList', 'identifiers': ["Token(TokenTypes.ID, 'a', (12, 0))", "Token(TokenTypes.ID, 'b', (15, 0))"]}, 'body_expression': {'ast_node_name': 'ConditionalExpression', 'condition': {'ast_node_name': 'BinaryExpression', 'lhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': 'b'}, 'operand': "Token(TokenTypes.DOUBLE_EQUAL, '==', (29, 0))", 'rhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'INTEGER', 'expr': '0'}}, 'consequent': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': 'a'}, 'alternative': {'ast_node_name': 'ApplicationExpression', 'function': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': 'gcd'}, 'arguments': {'ast_node_name': 'ExpressionList', 'expressions': [{'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': 'b'}, {'ast_node_name': 'BinaryExpression', 'lhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': 'a'}, 'operand': "Token(TokenTypes.PERCENT, '%', (44, 0))", 'rhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': 'b'}}]}}}}]}}]},
            {'ast_node_name': 'StatementList', 'statements': [{'ast_node_name': 'AssignmentStatement', 'names': {'ast_node_name': 'IdList', 'identifiers': ["Token(TokenTypes.ID, 'Y', (3, 0))"]}, 'value': {'ast_node_name': 'ExpressionList', 'expressions': [{'ast_node_name': 'FunctionExpression', 'argument_names': {'ast_node_name': 'IdList', 'identifiers': ["Token(TokenTypes.ID, '$0', (0, 0))"]}, 'body_expression': {'ast_node_name': 'ApplicationExpression', 'function': {'ast_node_name': 'FunctionExpression', 'argument_names': {'ast_node_name': 'IdList', 'identifiers': ["Token(TokenTypes.ID, '$1', (0, 0))"]}, 'body_expression': {'ast_node_name': 'ApplicationExpression', 'function': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': '$0'}, 'arguments': {'ast_node_name': 'ExpressionList', 'expressions': [{'ast_node_name': 'ApplicationExpression', 'function': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': '$1'}, 'arguments': {'ast_node_name': 'ExpressionList', 'expressions': [{'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': '$1'}]}}]}}}, 'arguments': {'ast_node_name': 'ExpressionList', 'expressions': [{'ast_node_name': 'FunctionExpression', 'argument_names': {'ast_node_name': 'IdList', 'identifiers': ["Token(TokenTypes.ID, '$2', (0, 0))"]}, 'body_expression': {'ast_node_name': 'ApplicationExpression', 'function': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': '$0'}, 'arguments': {'ast_node_name': 'ExpressionList', 'expressions': [{'ast_node_name': 'ApplicationExpression', 'function': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': '$2'}, 'arguments': {'ast_node_name': 'ExpressionList', 'expressions': [{'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': '$2'}]}}]}}}]}}}]}}]},
            {'ast_node_name': 'StatementList', 'statements': [{'ast_node_name': 'LetExpression', 'binding_variables': {'ast_node_name': 'IdList', 'identifiers': ["Token(TokenTypes.ID, 'fact', (3, 0))"]}, 'initialiser_expressions': {'ast_node_name': 'ExpressionList', 'expressions': [{'ast_node_name': 'FunctionExpression', 'argument_names': {'ast_node_name': 'IdList', 'identifiers': ["Token(TokenTypes.ID, '$3', (0, 0))"]}, 'body_expression': {'ast_node_name': 'ConditionalExpression', 'condition': {'ast_node_name': 'BinaryExpression', 'lhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': '$3'}, 'operand': "Token(TokenTypes.DOUBLE_EQUAL, '==', (31, 0))", 'rhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'INTEGER', 'expr': '1'}}, 'consequent': {'ast_node_name': 'AtomExpression', 'type': 'INTEGER', 'expr': '1'}, 'alternative': {'ast_node_name': 'BinaryExpression', 'lhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': '$3'}, 'operand': "Token(TokenTypes.STAR, '*', (39, 0))", 'rhs_expr': {'ast_node_name': 'ApplicationExpression', 'function': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': 'fact'}, 'arguments': {'ast_node_name': 'ExpressionList', 'expressions': [{'ast_node_name': 'BinaryExpression', 'lhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': '$3'}, 'operand': "Token(TokenTypes.MINUS, '-', (48, 0))", 'rhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'INTEGER', 'expr': '1'}}]}}}}}]}, 'body_expression': {'ast_node_name': 'ApplicationExpression', 'function': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': 'fact'}, 'arguments': {'ast_node_name': 'ExpressionList', 'expressions': [{'ast_node_name': 'AtomExpression', 'type': 'INTEGER', 'expr': '2'}]}}}]},
            {'ast_node_name': 'StatementList', 'statements': [{'ast_node_name': 'AssignmentStatement', 'names': {'ast_node_name': 'IdList', 'identifiers': ["Token(TokenTypes.ID, 'pair', (5, 0))"]}, 'value': {'ast_node_name': 'ExpressionList', 'expressions': [{'ast_node_name': 'FunctionExpression', 'argument_names': {'ast_node_name': 'IdList', 'identifiers': ["Token(TokenTypes.ID, 'a', (13, 0))", "Token(TokenTypes.ID, 'b', (16, 0))", "Token(TokenTypes.ID, 'f', (19, 0))"]}, 'body_expression': {'ast_node_name': 'ApplicationExpression', 'function': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': 'f'}, 'arguments': {'ast_node_name': 'ExpressionList', 'expressions': [{'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': 'a'}, {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': 'b'}]}}}]}}, {'ast_node_name': 'AssignmentStatement', 'names': {'ast_node_name': 'IdList', 'identifiers': ["Token(TokenTypes.ID, 'first', (41, 0))"]}, 'value': {'ast_node_name': 'ExpressionList', 'expressions': [{'ast_node_name': 'FunctionExpression', 'argument_names': {'ast_node_name': 'IdList', 'identifiers': ["Token(TokenTypes.ID, 'a', (50, 0))", "Token(TokenTypes.ID, 'b', (53, 0))"]}, 'body_expression': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': 'a'}}]}}, {'ast_node_name': 'AssignmentStatement', 'names': {'ast_node_name': 'IdList', 'identifiers': ["Token(TokenTypes.ID, 'second', (67, 0))"]}, 'value': {'ast_node_name': 'ExpressionList', 'expressions': [{'ast_node_name': 'FunctionExpression', 'argument_names': {'ast_node_name': 'IdList', 'identifiers': ["Token(TokenTypes.ID, 'a', (77, 0))", "Token(TokenTypes.ID, 'b', (80, 0))"]}, 'body_expression': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': 'b'}}]}}]},
            {'ast_node_name': 'StatementList', 'statements': [{'ast_node_name': 'ApplicationExpression', 'function': {'ast_node_name': 'LetExpression', 'binding_variables': {'ast_node_name': 'IdList', 'identifiers': ["Token(TokenTypes.ID, 'a', (4, 0))", "Token(TokenTypes.ID, 'b', (7, 0))"]}, 'initialiser_expressions': {'ast_node_name': 'ExpressionList', 'expressions': [{'ast_node_name': 'AtomExpression', 'type': 'INTEGER', 'expr': '1'}, {'ast_node_name': 'AtomExpression', 'type': 'INTEGER', 'expr': '2'}]}, 'body_expression': {'ast_node_name': 'FunctionExpression', 'argument_names': {'ast_node_name': 'IdList', 'identifiers': ["Token(TokenTypes.ID, '$4', (0, 0))"]}, 'body_expression': {'ast_node_name': 'BinaryExpression', 'lhs_expr': {'ast_node_name': 'BinaryExpression', 'lhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': 'a'}, 'operand': "Token(TokenTypes.PLUS, '+', (33, 0))", 'rhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': 'b'}}, 'operand': "Token(TokenTypes.PLUS, '+', (37, 0))", 'rhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': '$4'}}}}, 'arguments': {'ast_node_name': 'ExpressionList', 'expressions': [{'ast_node_name': 'AtomExpression', 'type': 'INTEGER', 'expr': '1'}]}}]},
            {'ast_node_name': 'StatementList', 'statements': [{'ast_node_name': 'LetExpression', 'binding_variables': {'ast_node_name': 'IdList', 'identifiers': ["Token(TokenTypes.ID, 'gcd', (3, 0))"]}, 'initialiser_expressions': {'ast_node_name': 'ExpressionList', 'expressions': [{'ast_node_name': 'FunctionExpression', 'argument_names': {'ast_node_name': 'IdList', 'identifiers': ["Token(TokenTypes.ID, '$5', (0, 0))", "Token(TokenTypes.ID, '$6', (0, 0))"]}, 'body_expression': {'ast_node_name': 'ConditionalExpression', 'condition': {'ast_node_name': 'BinaryExpression', 'lhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': '$6'}, 'operand': "Token(TokenTypes.DOUBLE_EQUAL, '==', (33, 0))", 'rhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'INTEGER', 'expr': '0'}}, 'consequent': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': '$5'}, 'alternative': {'ast_node_name': 'ApplicationExpression', 'function': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': 'gcd'}, 'arguments': {'ast_node_name': 'ExpressionList', 'expressions': [{'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': '$6'}, {'ast_node_name': 'BinaryExpression', 'lhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': '$5'}, 'operand': "Token(TokenTypes.PERCENT, '%', (48, 0))", 'rhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': '$6'}}]}}}}]}, 'body_expression': {'ast_node_name': 'ApplicationExpression', 'function': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': 'gcd'}, 'arguments': {'ast_node_name': 'ExpressionList', 'expressions': [{'ast_node_name': 'AtomExpression', 'type': 'INTEGER', 'expr': '14'}, {'ast_node_name': 'AtomExpression', 'type': 'INTEGER', 'expr': '14'}]}}}]},
            {'ast_node_name': 'StatementList', 'statements': [{'ast_node_name': 'AssignmentStatement', 'names': {'ast_node_name': 'IdList', 'identifiers': ["Token(TokenTypes.ID, 'ack', (3, 0))"]}, 'value': {'ast_node_name': 'ExpressionList', 'expressions': [{'ast_node_name': 'FunctionExpression', 'argument_names': {'ast_node_name': 'IdList', 'identifiers': ["Token(TokenTypes.ID, '$7', (0, 0))", "Token(TokenTypes.ID, '$8', (0, 0))"]}, 'body_expression': {'ast_node_name': 'ConditionalExpression', 'condition': {'ast_node_name': 'BinaryExpression', 'lhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': '$7'}, 'operand': "Token(TokenTypes.DOUBLE_EQUAL, '==', (37, 0))", 'rhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'INTEGER', 'expr': '0'}}, 'consequent': {'ast_node_name': 'BinaryExpression', 'lhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': '$8'}, 'operand': "Token(TokenTypes.PLUS, '+', (29, 0))", 'rhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'INTEGER', 'expr': '1'}}, 'alternative': {'ast_node_name': 'ConditionalExpression', 'condition': {'ast_node_name': 'BinaryExpression', 'lhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': '$8'}, 'operand': "Token(TokenTypes.DOUBLE_EQUAL, '==', (61, 0))", 'rhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'INTEGER', 'expr': '0'}}, 'consequent': {'ast_node_name': 'ApplicationExpression', 'function': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': 'ack'}, 'arguments': {'ast_node_name': 'ExpressionList', 'expressions': [{'ast_node_name': 'BinaryExpression', 'lhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': '$7'}, 'operand': "Token(TokenTypes.MINUS, '-', (49, 0))", 'rhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'INTEGER', 'expr': '1'}}, {'ast_node_name': 'AtomExpression', 'type': 'INTEGER', 'expr': '1'}]}}, 'alternative': {'ast_node_name': 'ApplicationExpression', 'function': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': 'ack'}, 'arguments': {'ast_node_name': 'ExpressionList', 'expressions': [{'ast_node_name': 'BinaryExpression', 'lhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': '$7'}, 'operand': "Token(TokenTypes.MINUS, '-', (73, 0))", 'rhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'INTEGER', 'expr': '1'}}, {'ast_node_name': 'ApplicationExpression', 'function': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': 'ack'}, 'arguments': {'ast_node_name': 'ExpressionList', 'expressions': [{'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': '$7'}, {'ast_node_name': 'BinaryExpression', 'lhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'ID', 'expr': '$8'}, 'operand': "Token(TokenTypes.MINUS, '-', (87, 0))", 'rhs_expr': {'ast_node_name': 'AtomExpression', 'type': 'INTEGER', 'expr': '1'}}]}}]}}}}}]}}]}
        )
        for source, should in zip(sources, shoulds):
            scanner = QuarkScanner(source)
            parser = QuarkParser(scanner.tokens())
            self.assertEqual(parser.build_parse_tree().dict_repr, should)


if __name__ == '__main__':
    unittest.main()
